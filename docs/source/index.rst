DistCache (Distributed Cache)
*****************************
Distcache is a open-source distributed in-memory cache and database.
Operations are mostly asynchronous to achieve high performance.
It is implemented purely in python without any external dependency
which should make it easier to install and get started with.
One of design goal of this project is ease of use and less cognitive load to users of
similar caching/database systems like Redis, Memcached.

Features
========
1. All basic python data types and objects made from their combination are supported. For instance, int, str, dict, set, tuple, list, etc and their objects that have only these types as their attributes are supported.
2. Key cache operations are logged so when the server fails, the cache can be reconstructed from the log files.
3. The APIs are similar to Memcached and Redis to reduce cognitive when migrating between platforms.
4. Since, distcache has pure python implementation the installation process should painless. It's makes it easier to get started up and running.
5. Its' architecture assumes that the cache clients and servers can fail and plans for it. The impact is minimal on adding and removing cache servers.

Coming Up
=========
1. Health monitoring of clients and servers.
2. Support for binary data, images, pdf documents.

Install
=======
    pip install distcache


Platform
========
* Linux
* Windows
* Python 2.7 to Python 3.5

Quick Start
===========
client.py

.. code-block:: python
   :name: client.py

    from distcache.cache_client import CacheClient

    client = CacheClient()

    # Cache operations
    client.set("brazil", "football")
    client.set("harry", "potter")
    client.set(1, 2)
    client.set(3, 6)
    client.set("hey", "hola")
    client.get("hey")
    client.get(1)
    client.set("hey", "there")
    client.get("hey")
    client.delete(3)
    client.get(3)
    client.get("brazil")


server.py

.. code-block:: python
   :name: server.py

    from distcache.cache_server import CacheServer

    server = CacheServer('localhost', 2050)

Note: Make sure to include the address of the server in the self.server_pool list in config.py file.

Run server.py and client.py.


APIs
====
:doc:`All distcache APIs <apis>`


Usage
=====

1. You have multiple servers serving users. And you need to increment user id across the server such that there is no duplicate.
Similarly you can store product_id, session_id, user_id, etc.

2. 80% of the database access is generated by 20% of the queries. You should absolutely not be doing duplicate computations.
Cache the results. And, the figures vary and you can still use caching service. It just makes things faster.
